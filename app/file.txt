Great question! When you're handling user passwords in Express.js + MongoDB, you should never store them in plain text. Instead of encrypting/decrypting them (which is reversible), you should hash them with a one-way hashing function like bcrypt.

Here’s how to properly hash (encrypt) and verify (compare) passwords using bcrypt.

🔐 Step-by-Step: Hash and Compare Passwords
✅ 1. Install bcrypt
bash
Copy
Edit
npm install bcrypt
✅ 2. Hash Password Before Saving
Here’s an example using Mongoose:

js
Copy
Edit
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

const userSchema = new mongoose.Schema({
  username: String,
  password: String
});

// Hash the password before saving
userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next();

  try {
    const salt = await bcrypt.genSalt(10); // generate salt
    this.password = await bcrypt.hash(this.password, salt); // hash password
    next();
  } catch (err) {
    next(err);
  }
});

module.exports = mongoose.model('User', userSchema);
✅ 3. Compare Passwords During Login
When the user logs in, compare the plain password with the hashed one:

js
Copy
Edit
const bcrypt = require('bcrypt');
const User = require('./models/User'); // your user model

const login = async (req, res) => {
  const { username, password } = req.body;

  const user = await User.findOne({ username });
  if (!user) return res.status(401).json({ message: 'User not found' });

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) return res.status(401).json({ message: 'Invalid password' });

  res.status(200).json({ message: 'Login successful' });
};
⚠️ Why Not Encryption?
Encryption can be reversed if someone gets your key.

Hashing (e.g., bcrypt) is one-way and secure, ideal for passwords.

🧪 Optional: Test It in Isolation
js
Copy
Edit
const bcrypt = require('bcrypt');

(async () => {
  const password = 'mySecret123';
  const hashed = await bcrypt.hash(password, 10);
  console.log('Hashed:', hashed);

  const match = await bcrypt.compare('mySecret123', hashed);
  console.log('Do they match?', match); // true
})();
Would you like a quick boilerplate with full register/login routes using this method?